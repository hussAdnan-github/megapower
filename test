// 'use client';
// import React, { useState, useEffect } from 'react';
// import { baseUrl } from '@/context/baseURL';
// import { usePathname, useRouter, useSearchParams } from 'next/navigation';


// import ProductFilter from './ProductFilter';
// import ProductCard from './ProductCard';
// import PaginationControls from './layout/PaginationControls';
// const ITEMS_PER_PAGE = 1;

// export default function ProductList({ initialProducts, department, currentPage }) {
//     const router = useRouter();
//     const pathname = usePathname();


//     const [products, setProducts] = useState(initialProducts['result'] || []);
//     const [loading, setLoading] = useState(false);
//     const [searchTerm, setSearchTerm] = useState('');

//     const [paginationData, setPaginationData] = useState({
//         next: initialProducts?.next || null,
//         previous: initialProducts?.previous || null,
//         count: initialProducts?.count || 0,
//     });
//     const searchParams = useSearchParams();
//     const totalPages = Math.ceil(paginationData.count / ITEMS_PER_PAGE);




//     useEffect(() => {

//         const params = new URLSearchParams(searchParams.toString());


//         if (searchTerm.trim()) {
//             params.set('search', searchTerm.trim());
//         } else {
//             // إذا كان البحث فارغًا، لا تقم بحذف الـ search parameter من الـ URL فورًا
//             // إلا إذا كان هذا هو السلوك المطلوب.
//             // هنا، سنعتمد على الـ URL كمصدر للحقيقة.
//         }

//         const fetchData = async () => {
//             setLoading(true);
//             try {
//                 const res = await fetch(`${baseUrl}/products/products/?${params.toString()}`);
//                 if (!res.ok) {
//                     throw new Error('Failed to fetch products');
//                 }
//                 const data = await res.json();

//                 setProducts(data?.data?.result || []);
//                 setPaginationData({
//                     next: data?.data?.next,
//                     previous: data?.data?.previous,
//                     count: data?.data?.count,
//                 });

//             } catch (error) {
//                 console.error(error);
//                 setProducts([]);
//             } finally {
//                 setLoading(false);
//             }
//         };

//         fetchData();

//     }, [searchParams]);

//     useEffect(() => {
//         const debounceTimeout = setTimeout(() => {
//             const params = new URLSearchParams(searchParams.toString());
//             if (searchTerm.trim()) {
//                 params.set('search', searchTerm.trim());
//                 params.set('page', '1');
//             } else {
//                 params.delete('search');
//             }
//             console.log(params.toString())
//             router.push(`${pathname}?${params.toString()}`);
//         }, 500);

//         return () => clearTimeout(debounceTimeout);
//     }, [searchTerm, pathname, router]);

//     return (
//         <div className="container mx-auto px-4">
//             <div className="grid grid-cols-1 lg:grid-cols-4 gap-12">

//                 <ProductFilter
//                     department={department}
//                     searchTerm={searchTerm}
//                     setSearchTerm={setSearchTerm}
//                 />

//                 <div className="lg:col-span-3">
//                     {loading ? (
//                         <p>جاري البحث...</p>
//                     ) : Array.isArray(products) && products.length > 0 ? (
//                         <div className="grid grid-cols-1 md:grid-cols-2 gap-8">

//                             {products.map((product, index) => (
//                                 <ProductCard key={product.id} product={product} index={index} />
//                             ))}
//                         </div>
//                     ) : (
//                         <p>لا توجد منتجات تطابق بحثك.</p>
//                     )}
//                 </div>
//             </div>
//             <PaginationControls
//                 currentPage={currentPage}
//                 totalPages={totalPages}
//                 hasNextPage={!!paginationData.next}
//                 hasPrevPage={!!paginationData.previous}
//             />
//         </div>

//     );
// }
























// 'use client';
// import React, { useState, useEffect } from 'react';
// import { baseUrl } from '@/context/baseURL';
// import { usePathname, useRouter, useSearchParams } from 'next/navigation';
// // 1. استيراد useQuery
// import { useQuery } from '@tanstack/react-query';

// import ProductFilter from './ProductFilter';
// import ProductCard from './ProductCard';
// import PaginationControls from './layout/PaginationControls';

// const ITEMS_PER_PAGE = 20;

// // 2. تعريف دالة جلب البيانات خارج المكون
// // سيقوم useQuery بتمرير queryKey إلى هذه الدالة
// const fetchProducts = async ({ queryKey }) => {
//     // queryKey سيكون ['products', 'department=2&page=1']
//     const [_key, paramsString] = queryKey;
//     const res = await fetch(`${baseUrl}/products/products/?${paramsString}`);
//     if (!res.ok) {
//         throw new Error('فشل في جلب المنتجات');
//     }
//     return res.json();
// };


// export default function ProductList({ department, currentPage }) {
//     const router = useRouter();
//     const pathname = usePathname();
//     const searchParams = useSearchParams();

//     // حالة البحث تبقى كما هي لأنها تخص تفاعل المستخدم المباشر
//     const [searchTerm, setSearchTerm] = useState('');

//     // 3. استبدال useState و useEffect بـ useQuery
//     const { data: apiResponse, isLoading, isError, error } = useQuery({
//         // queryKey هو المفتاح الفريد للبيانات في الـ cache.
//         // عندما يتغير هذا المفتاح، سيقوم useQuery بإعادة الجلب.
//         queryKey: ['products', searchParams.toString()],
//         // queryFn هي الدالة التي تقوم بجلب البيانات
//         queryFn: fetchProducts,
//         // (اختياري) احتفظ بالبيانات القديمة مرئية أثناء تحميل البيانات الجديدة
//         keepPreviousData: true, 
//         // (اختياري) مدة اعتبار البيانات "حديثة" (لا يتم إعادة جلبها في الخلفية) - 5 دقائق
//         staleTime: 1000 * 60 * 5, 
//     });

//     // 4. استخراج البيانات من استجابة useQuery
//     const products = apiResponse?.data?.result || [];
//     const paginationData = {
//         next: apiResponse?.data?.next || null,
//         previous: apiResponse?.data?.previous || null,
//         count: apiResponse?.data?.count || 0,
//     };
    
//     const totalPages = Math.ceil(paginationData.count / ITEMS_PER_PAGE);

//     // 5. الـ useEffect الخاص بالبحث (Debounce) يبقى كما هو!
//     // وظيفته هي تحديث الـ URL، وعندما يتغير الـ URL، سيقوم useQuery بالعمل تلقائيًا.
//     useEffect(() => {
//         const debounceTimeout = setTimeout(() => {
//             const params = new URLSearchParams(searchParams.toString());
//             if (searchTerm.trim()) {
//                 params.set('search', searchTerm.trim());
//                 params.set('page', '1'); // إعادة للصفحة الأولى عند البحث
//             } else {
//                 params.delete('search');
//             }
//             // فقط قم بتحديث الـ URL. useQuery سيتكفل بالباقي.
//             router.push(`${pathname}?${params.toString()}`);
//         }, 500);

//         return () => clearTimeout(debounceTimeout);
//     }, [searchTerm, pathname, router, searchParams]);

//     return (
//         <div className="container mx-auto px-4">
//             <div className="grid grid-cols-1 lg:grid-cols-4 gap-12">
//                 <ProductFilter
//                     department={department}
//                     searchTerm={searchTerm}
//                     setSearchTerm={setSearchTerm}
//                 />
//                 <div className="lg:col-span-3">
//                     {/* 6. استخدام حالات التحميل والخطأ من useQuery */}
//                     {isLoading ? (
//                         <p>جاري البحث...</p>
//                     ) : isError ? (
//                         <p>حدث خطأ: {error.message}</p>
//                     ) : Array.isArray(products) && products.length > 0 ? (
//                         <div className="grid grid-cols-1 md:grid-cols-2 gap-8">
//                             {products.map((product, index) => (
//                                 <ProductCard key={product.id} product={product} index={index} />
//                             ))}
//                         </div>
//                     ) : (
//                         <p>لا توجد منتجات تطابق بحثك.</p>
//                     )}
//                 </div>
//             </div>
//             <PaginationControls
//                 currentPage={currentPage}
//                 totalPages={totalPages}
//                 hasNextPage={!!paginationData.next}
//                 hasPrevPage={!!paginationData.previous}
//             />
//         </div>
//     );
// }













 //  <div className="container mx-auto">
    //         {/* Category Filters */}
    //         <div className="flex flex-wrap justify-center gap-4 mb-12">
    //           {articles.map((article) => (
    //             <button
    //               key={article.id}
    //               className={`py-2 px-6 rounded-full font-semibold transition-colors duration-300 `}
    //             >
    //               {article.name_ar}
    //             </button>

    //           ))}
    //           <button>
    //               All
    //             </button>
    //         </div>

    //         {/* Animated Articles Grid */}
    //         {/* <AnimatePresence mode="wait">
    //           <motion.div */}
    //         {/* key={activeCategory}
    //             className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8"
    //             variants={containerVariants}
    //             initial="hidden"
    //             animate="show"
    //           > */}

    //         <div>

    //                 {/* <div
    //                   key={article.id}
    //                   className=" dark-bg-li rounded-xl shadow-lg hover:shadow-2xl transition-all duration-300 overflow-hidden"
    //                   // variants={itemVariants}
    //                   // layout
    //                 >
    //                   <Link href={`/news/${article.id}`} className="block">
    //                     <div className="relative h-60 w-full">
    //                       <Image 
    //                         src={article.image} 
    //                         alt={article.title_ar} 
    //                         layout="fill"
    //                         objectFit="cover"
    //                         className="transition-transform duration-500 hover:scale-105"
    //                       />
    //                     </div>
    //                   </Link>
    //                   <div className="p-6">
    //                     <div className="flex justify-between items-center text-sm text-gray-500 dark:text-gray-400 mb-2">
    //                       <span className="  py-1 px-3 rounded-full font-semibold text-xs">{article.category}</span>
    //                       <span>{article.created_at}</span>
    //                     </div>
    //                     <h3 className="text-xl font-bold   mb-2">
    //                       <Link href={`/news/${article.id}`} className="hover:text-blue-600 dark:hover:text-blue-400 transition-colors duration-300">
    //                         {article.title_ar}
    //                       </Link>
    //                     </h3>
    //                     <p className=" ">{article.type_article}</p>
    //                   </div>
    //                 </div> */}


    //         </div>
    //         {/* </motion.div>
    //         </AnimatePresence> */}
    //       </div>